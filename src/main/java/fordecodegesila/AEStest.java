package fordecodegesila;
//package guoweiforcrypto;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

//import org.bouncycastle.util.encoders.Base64Encoder;
import java.io.File;
import java.io.FileOutputStream;
import java.util.Base64;
//import sun.misc.BASE64Decoder;

/**
 *
 * @author Administrator
 *
 */
public class AEStest {

    // 加密
    public static String Encrypt(String sSrc, String sKey) throws Exception {
        if (sKey == null) {
            System.out.print("Key为空null");
            return null;
        }
        // 判断Key是否为16位
        if (sKey.length() != 16) {
            System.out.print("Key长度不是16位");
            return null;
        }
        byte[] raw = sKey.getBytes("utf-8");
        SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");//"算法/模式/补码方式"
        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
        byte[] encrypted = cipher.doFinal(sSrc.getBytes("utf-8"));

        return Base64.getEncoder().encodeToString(encrypted);//此处使用BASE64做转码功能，同时能起到2次加密的作用。
    }

    // 解密
    public static String Decrypt(String sSrc, String sKey) throws Exception {
        try {
            // 判断Key是否正确
            if (sKey == null) {
                System.out.print("Key为空null");
                return null;
            }
            // 判断Key是否为16位
            if (sKey.length() != 16) {
                System.out.print("Key长度不是16位");
                return null;
            }
            byte[] raw = sKey.getBytes("utf-8");
            SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            cipher.init(Cipher.DECRYPT_MODE, skeySpec);
//            BASE64Decoder base64Decoder = new BASE64Decoder();
            byte[] encrypted1 = Base64.getDecoder().decode(sSrc);
            System.out.println(new String(encrypted1));
//            byte[] encrypted1 = new Base64().decode(sSrc);//先用base64解密
            try {
                byte[] original = cipher.doFinal(encrypted1);
                String originalString = new String(original,"utf-8");
                return originalString;
            } catch (Exception e) {
                System.out.println(e.toString());
                return null;
            }
        } catch (Exception ex) {
            System.out.println(ex.toString());
            return null;
        }
    }

    public static String DecryptCBC(String sSrc, String sKey,String iv) throws Exception {
        try {
            // 判断Key是否正确
            if (sKey == null) {
                System.out.print("Key为空null");
                return null;
            }
            // 判断Key是否为16位
            if (sKey.length() != 16) {
                System.out.print("Key长度不是16位");
                return null;
            }
            byte[] raw = sKey.getBytes("utf-8");
            SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
            Cipher cipher = Cipher.getInstance("AES/CBC/NoPadding");
            IvParameterSpec ivParameterSpec= new IvParameterSpec(iv.getBytes());
            cipher.init(Cipher.DECRYPT_MODE, skeySpec,ivParameterSpec);
//            BASE64Decoder base64Decoder = new BASE64Decoder();
            byte[] encrypted1 = Base64.getDecoder().decode(sSrc);
            String filename ="ss";
            if (encrypted1 != null) {
                String filepath = "./" + filename;
                File file = new File(filepath);
                if (file.exists()) {
                    file.delete();
                }
                FileOutputStream fos = new FileOutputStream(file);
                fos.write(encrypted1);
                fos.flush();
                fos.close();
            }

            System.out.println(new String(encrypted1));
//            byte[] encrypted1 = new Base64().decode(sSrc);//先用base64解密
            try {
                byte[] original = cipher.doFinal(encrypted1);
                String originalString = new String(original,"utf-8");
                return originalString;
            } catch (Exception e) {
                System.out.println(e.toString());
                return null;
            }
        } catch (Exception ex) {
            System.out.println(ex.toString());
            return null;
        }
    }
    public static void decode54(String a) throws Exception{
//        ClassLoader clzLoader = Thread.currentThread().getContextClassLoader();
//        Class datatypeConverterClz = clzLoader.loadClass("javax.xml.bind.DatatypeConverter");
//        byte[] encrypted1 = (byte[]) datatypeConverterClz.getMethod("parseBase64Binary", String.class).invoke(datatypeConverterClz, a);
        byte[] encrypted1 = Base64.getDecoder().decode(a);
        String filename = "ss.class";
        if (encrypted1 != null) {
            String filepath = "./" + filename;
            File file = new File(filepath);
            if (file.exists()) {
                file.delete();
            }
            FileOutputStream fos = new FileOutputStream(file);
            fos.write(encrypted1);
            fos.flush();
            fos.close();
        }
    }


    public static void main(String[] args) throws Exception {
        /*
         * 此处使用AES-128-ECB加密模式，key需要为16位。
         */
        String cKey = "4e7d489b49ec93db";
        String myiv = "0123456789abcdef";
//        // 需要加密的字串
//        String cSrc = "www.gowhere.so";
//        System.out.println(cSrc);
//        // 加密
//        String enString = AEStest.Encrypt(cSrc, cKey);
//        System.out.println("加密后的字串是：" + enString);
        String enString="";
//  b64解码
        AEStest.decode54(enString);
        System.out.println("文件生成ss.class");
        // 解密
//        String DeString = AEStest.DecryptCBC(enString, cKey,myiv);
//        System.out.println("解密后的字串是：" + DeString);
    }
}
